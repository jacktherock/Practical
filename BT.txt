Title: Write a smart contract on a test network, for Bank account of a customer for following operations:
1. Deposit money
2. Withdraw Money
3. Show balance

Prerequisite:
1. Basic knowledge of cryptocurrency
2. Basic knowledge of distributed computing concept
3. Working of blockchain.

Theory:
The contract will allow deposits from any account, and can be trusted to allow withdrawals only by accounts that have sufficient funds to cover the requested withdrawal.

In the withdraw() function above, it is very important to adjust balanceOf[msg.sender] before transferring ether to avoid an exploitable vulnerability. 
The reason is specific to smart contracts and the fact that a transfer to a smart contract executes code in that smart contract. 
(The essentials of Ethereum transactions are discussed in How Ethereum Transactions Work.)
Now, suppose that the code in withdraw() did not adjust balanceOf[msg.sender] before making the transfer and suppose that msg.sender was a malicious smart contract. 
Upon receiving the transfer—handled by msg.sender’s fallback function—that malicious contract could initiate another withdrawal from the banking contract. 
When the banking contract handles this second withdrawal request, it would have already transferred ether for the original withdrawal, but it would not have an updated balance, so it would allow this second withdrawal!
This vulnerability is called a “reentrancy” bug because it happens when a smart contract invokes code in a different smart contract that then calls back into the original, thereby reentering the exploitable contract. 
For this reason, it’s essential to always make sure a contract’s internal state is fully updated before it potentially invokes code in another smart contract. 
(And, it’s essential to remember that every transfer to a smart contract executes that contract’s code.) 
To avoid this sort of reentrancy bug, follow the “Checks-Effects-Interactions pattern” as described in the Solidity documentation. 
The withdraw() function above is an example of implementing this pattern.